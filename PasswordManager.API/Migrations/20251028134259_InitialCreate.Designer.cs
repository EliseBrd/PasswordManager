// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasswordManager.API;

#nullable disable

namespace PasswordManager.API.Migrations
{
    [DbContext(typeof(KeepassDBContext))]
    [Migration("20251028134259_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AppUserVault", b =>
                {
                    b.Property<string>("SharedUsersIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedVaultsIdentifier")
                        .HasColumnType("TEXT");

                    b.HasKey("SharedUsersIdentifier", "SharedVaultsIdentifier");

                    b.HasIndex("SharedVaultsIdentifier");

                    b.ToTable("AppUserVault");
                });

            modelBuilder.Entity("PasswordManager.API.AppUser", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("entraId")
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PasswordManager.API.Vault", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MasterSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("encryptKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isShared")
                        .HasColumnType("INTEGER");

                    b.HasKey("Identifier");

                    b.HasIndex("CreatorIdentifier", "Name")
                        .IsUnique();

                    b.ToTable("Vaults");
                });

            modelBuilder.Entity("PasswordManager.API.VaultEntry", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CypherData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CypherPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IVData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IVPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagPasswords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VaultIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.HasIndex("CreatorIdentifier");

                    b.HasIndex("VaultIdentifier");

                    b.ToTable("VaultEntries");
                });

            modelBuilder.Entity("AppUserVault", b =>
                {
                    b.HasOne("PasswordManager.API.AppUser", null)
                        .WithMany()
                        .HasForeignKey("SharedUsersIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.API.Vault", null)
                        .WithMany()
                        .HasForeignKey("SharedVaultsIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManager.API.Vault", b =>
                {
                    b.HasOne("PasswordManager.API.AppUser", "Creator")
                        .WithMany("Vaults")
                        .HasForeignKey("CreatorIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PasswordManager.API.VaultEntry", b =>
                {
                    b.HasOne("PasswordManager.API.AppUser", "Creator")
                        .WithMany("Entries")
                        .HasForeignKey("CreatorIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.API.Vault", "Vault")
                        .WithMany("Entries")
                        .HasForeignKey("VaultIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("PasswordManager.API.AppUser", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Vaults");
                });

            modelBuilder.Entity("PasswordManager.API.Vault", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
